# datavarse/tasks/dataverse-build.yml

- name: install maven
  yum:
    name: maven
    state: latest

- name: wedge in dataverse-bundled files before building from branch
  copy:
    src: "{{ item }}"
    dest: "/tmp/dvinstall/"
    remote_src: yes
  with_items:
    - "{{ dataverse.srcdir }}/scripts/api/setup-datasetfields.sh"
    - "{{ dataverse.srcdir }}/scripts/api/setup-users.sh"
    - "{{ dataverse.srcdir }}/scripts/api/setup-builtin-roles.sh"
    - "{{ dataverse.srcdir }}/scripts/api/setup-dvs.sh"
    - "{{ dataverse.srcdir }}/scripts/api/setup-identity-providers.sh"
    - "{{ dataverse.srcdir }}/scripts/api/setup-all.sh"
    - "{{ dataverse.srcdir }}/scripts/api/post-install-api-block.sh"
    - "{{ dataverse.srcdir }}/scripts/installer/install"
    - "{{ dataverse.srcdir }}/scripts/installer/glassfish-setup.sh"

- name: older branches specify an older version in pom.xml. use current.
  get_url:
    url: https://raw.githubusercontent.com/IQSS/dataverse/develop/pom.xml
    dest: "{{ dataverse.srcdir }}/pom.xml"

- name: copy api script data directory
  shell: "/bin/cp -r {{ dataverse.srcdir }}/scripts/api/data /tmp/dvinstall/"

- name: copy remaining files from branch
  copy:
    src: "{{ item }}"
    dest: "/tmp/dvinstall/"
    remote_src: yes
  with_items:
    - "{{ dataverse.srcdir }}/scripts/database/reference_data.sql"
    - "{{ dataverse.srcdir }}/conf/jhove/jhove.conf"
    - "{{ dataverse.srcdir }}/conf/jhove/jhoveConfig.xsd"

- name: get branch_commit
  shell: 'cd "{{ dataverse.srcdir }}" && git log --oneline | head -1 | awk "{print $1}"'
  register: bcout

- set_fact:
    commit='{{ bcout.stdout.split(" ")[0] }}'

- set_fact:
    jacoco_arg=''

- set_fact:
    jacoco_arg='-Djacoco.skip.instrument=false'
  when: dataverse.jacoco.enabled == true

- name: add branch name, branch_commit to BuildNumber.properties
  lineinfile:
    path: "{{ dataverse.srcdir }}/src/main/java/BuildNumber.properties"
    line: "build.number={{ dataverse_branch }}-{{ commit }}"
    create: yes

- name: build warfile with default tests. tail /tmp/dataverse/mvn.out for gory details.
  shell: "mvn -T 2C package > mvn.out"
  args:
    chdir: "{{ dataverse.srcdir }}"
  when: dataverse.unittests.enabled == false

- name: build warfile with specified tests. tail /tmp/dataverse/mvn.out for gory details.
  shell: "mvn {{ dataverse.unittests.argument }} {{ jacoco_arg }} -T 2C package > mvn.out"
  args:
    chdir: "{{ dataverse.srcdir }}"
  when: dataverse.unittests.enabled == true

- name: copy warfile over release
  copy:
    src: "{{ item }}"
    dest: "/tmp/dvinstall/dataverse.war"
    backup: yes
    remote_src: yes
  with_fileglob:
    - "{{ dataverse.srcdir }}/target/dataverse*.war"

- name: place redeploy script
  template:
    src: redeploy.sh.j2
    dest: '{{ dataverse.srcdir }}/redeploy.sh'
    owner: root
    group: root
    mode: 0755
